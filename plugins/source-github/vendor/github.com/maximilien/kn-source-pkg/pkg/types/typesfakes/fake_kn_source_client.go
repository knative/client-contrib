// Code generated by counterfeiter. DO NOT EDIT.
package typesfakes

import (
	"sync"

	"github.com/maximilien/kn-source-pkg/pkg/types"
	"k8s.io/client-go/rest"
)

type FakeKnSourceClient struct {
	KnSourceParamsStub        func() *types.KnSourceParams
	knSourceParamsMutex       sync.RWMutex
	knSourceParamsArgsForCall []struct {
	}
	knSourceParamsReturns struct {
		result1 *types.KnSourceParams
	}
	knSourceParamsReturnsOnCall map[int]struct {
		result1 *types.KnSourceParams
	}
	NamespaceStub        func() string
	namespaceMutex       sync.RWMutex
	namespaceArgsForCall []struct {
	}
	namespaceReturns struct {
		result1 string
	}
	namespaceReturnsOnCall map[int]struct {
		result1 string
	}
	RestConfigStub        func() *rest.Config
	restConfigMutex       sync.RWMutex
	restConfigArgsForCall []struct {
	}
	restConfigReturns struct {
		result1 *rest.Config
	}
	restConfigReturnsOnCall map[int]struct {
		result1 *rest.Config
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeKnSourceClient) KnSourceParams() *types.KnSourceParams {
	fake.knSourceParamsMutex.Lock()
	ret, specificReturn := fake.knSourceParamsReturnsOnCall[len(fake.knSourceParamsArgsForCall)]
	fake.knSourceParamsArgsForCall = append(fake.knSourceParamsArgsForCall, struct {
	}{})
	fake.recordInvocation("KnSourceParams", []interface{}{})
	fake.knSourceParamsMutex.Unlock()
	if fake.KnSourceParamsStub != nil {
		return fake.KnSourceParamsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.knSourceParamsReturns
	return fakeReturns.result1
}

func (fake *FakeKnSourceClient) KnSourceParamsCallCount() int {
	fake.knSourceParamsMutex.RLock()
	defer fake.knSourceParamsMutex.RUnlock()
	return len(fake.knSourceParamsArgsForCall)
}

func (fake *FakeKnSourceClient) KnSourceParamsCalls(stub func() *types.KnSourceParams) {
	fake.knSourceParamsMutex.Lock()
	defer fake.knSourceParamsMutex.Unlock()
	fake.KnSourceParamsStub = stub
}

func (fake *FakeKnSourceClient) KnSourceParamsReturns(result1 *types.KnSourceParams) {
	fake.knSourceParamsMutex.Lock()
	defer fake.knSourceParamsMutex.Unlock()
	fake.KnSourceParamsStub = nil
	fake.knSourceParamsReturns = struct {
		result1 *types.KnSourceParams
	}{result1}
}

func (fake *FakeKnSourceClient) KnSourceParamsReturnsOnCall(i int, result1 *types.KnSourceParams) {
	fake.knSourceParamsMutex.Lock()
	defer fake.knSourceParamsMutex.Unlock()
	fake.KnSourceParamsStub = nil
	if fake.knSourceParamsReturnsOnCall == nil {
		fake.knSourceParamsReturnsOnCall = make(map[int]struct {
			result1 *types.KnSourceParams
		})
	}
	fake.knSourceParamsReturnsOnCall[i] = struct {
		result1 *types.KnSourceParams
	}{result1}
}

func (fake *FakeKnSourceClient) Namespace() string {
	fake.namespaceMutex.Lock()
	ret, specificReturn := fake.namespaceReturnsOnCall[len(fake.namespaceArgsForCall)]
	fake.namespaceArgsForCall = append(fake.namespaceArgsForCall, struct {
	}{})
	fake.recordInvocation("Namespace", []interface{}{})
	fake.namespaceMutex.Unlock()
	if fake.NamespaceStub != nil {
		return fake.NamespaceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.namespaceReturns
	return fakeReturns.result1
}

func (fake *FakeKnSourceClient) NamespaceCallCount() int {
	fake.namespaceMutex.RLock()
	defer fake.namespaceMutex.RUnlock()
	return len(fake.namespaceArgsForCall)
}

func (fake *FakeKnSourceClient) NamespaceCalls(stub func() string) {
	fake.namespaceMutex.Lock()
	defer fake.namespaceMutex.Unlock()
	fake.NamespaceStub = stub
}

func (fake *FakeKnSourceClient) NamespaceReturns(result1 string) {
	fake.namespaceMutex.Lock()
	defer fake.namespaceMutex.Unlock()
	fake.NamespaceStub = nil
	fake.namespaceReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeKnSourceClient) NamespaceReturnsOnCall(i int, result1 string) {
	fake.namespaceMutex.Lock()
	defer fake.namespaceMutex.Unlock()
	fake.NamespaceStub = nil
	if fake.namespaceReturnsOnCall == nil {
		fake.namespaceReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.namespaceReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeKnSourceClient) RestConfig() *rest.Config {
	fake.restConfigMutex.Lock()
	ret, specificReturn := fake.restConfigReturnsOnCall[len(fake.restConfigArgsForCall)]
	fake.restConfigArgsForCall = append(fake.restConfigArgsForCall, struct {
	}{})
	fake.recordInvocation("RestConfig", []interface{}{})
	fake.restConfigMutex.Unlock()
	if fake.RestConfigStub != nil {
		return fake.RestConfigStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.restConfigReturns
	return fakeReturns.result1
}

func (fake *FakeKnSourceClient) RestConfigCallCount() int {
	fake.restConfigMutex.RLock()
	defer fake.restConfigMutex.RUnlock()
	return len(fake.restConfigArgsForCall)
}

func (fake *FakeKnSourceClient) RestConfigCalls(stub func() *rest.Config) {
	fake.restConfigMutex.Lock()
	defer fake.restConfigMutex.Unlock()
	fake.RestConfigStub = stub
}

func (fake *FakeKnSourceClient) RestConfigReturns(result1 *rest.Config) {
	fake.restConfigMutex.Lock()
	defer fake.restConfigMutex.Unlock()
	fake.RestConfigStub = nil
	fake.restConfigReturns = struct {
		result1 *rest.Config
	}{result1}
}

func (fake *FakeKnSourceClient) RestConfigReturnsOnCall(i int, result1 *rest.Config) {
	fake.restConfigMutex.Lock()
	defer fake.restConfigMutex.Unlock()
	fake.RestConfigStub = nil
	if fake.restConfigReturnsOnCall == nil {
		fake.restConfigReturnsOnCall = make(map[int]struct {
			result1 *rest.Config
		})
	}
	fake.restConfigReturnsOnCall[i] = struct {
		result1 *rest.Config
	}{result1}
}

func (fake *FakeKnSourceClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.knSourceParamsMutex.RLock()
	defer fake.knSourceParamsMutex.RUnlock()
	fake.namespaceMutex.RLock()
	defer fake.namespaceMutex.RUnlock()
	fake.restConfigMutex.RLock()
	defer fake.restConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeKnSourceClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ types.KnSourceClient = new(FakeKnSourceClient)
