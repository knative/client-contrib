// Code generated by counterfeiter. DO NOT EDIT.
package typesfakes

import (
	"sync"

	"github.com/maximilien/kn-source-github/pkg/types"
	typesa "github.com/maximilien/kn-source-pkg/pkg/types"
	"k8s.io/client-go/rest"
	"knative.dev/eventing-contrib/github/pkg/apis/sources/v1alpha1"
)

type FakeGHSourceClient struct {
	CreateGHSourceStub        func(*v1alpha1.GitHubSource) (*v1alpha1.GitHubSource, error)
	createGHSourceMutex       sync.RWMutex
	createGHSourceArgsForCall []struct {
		arg1 *v1alpha1.GitHubSource
	}
	createGHSourceReturns struct {
		result1 *v1alpha1.GitHubSource
		result2 error
	}
	createGHSourceReturnsOnCall map[int]struct {
		result1 *v1alpha1.GitHubSource
		result2 error
	}
	DeleteGHSourceStub        func(string) error
	deleteGHSourceMutex       sync.RWMutex
	deleteGHSourceArgsForCall []struct {
		arg1 string
	}
	deleteGHSourceReturns struct {
		result1 error
	}
	deleteGHSourceReturnsOnCall map[int]struct {
		result1 error
	}
	GHSourceParamsStub        func() *types.GHSourceParams
	gHSourceParamsMutex       sync.RWMutex
	gHSourceParamsArgsForCall []struct {
	}
	gHSourceParamsReturns struct {
		result1 *types.GHSourceParams
	}
	gHSourceParamsReturnsOnCall map[int]struct {
		result1 *types.GHSourceParams
	}
	GetGHSourceStub        func(string) (*v1alpha1.GitHubSource, error)
	getGHSourceMutex       sync.RWMutex
	getGHSourceArgsForCall []struct {
		arg1 string
	}
	getGHSourceReturns struct {
		result1 *v1alpha1.GitHubSource
		result2 error
	}
	getGHSourceReturnsOnCall map[int]struct {
		result1 *v1alpha1.GitHubSource
		result2 error
	}
	KnSourceParamsStub        func() *typesa.KnSourceParams
	knSourceParamsMutex       sync.RWMutex
	knSourceParamsArgsForCall []struct {
	}
	knSourceParamsReturns struct {
		result1 *typesa.KnSourceParams
	}
	knSourceParamsReturnsOnCall map[int]struct {
		result1 *typesa.KnSourceParams
	}
	NamespaceStub        func() string
	namespaceMutex       sync.RWMutex
	namespaceArgsForCall []struct {
	}
	namespaceReturns struct {
		result1 string
	}
	namespaceReturnsOnCall map[int]struct {
		result1 string
	}
	RestConfigStub        func() *rest.Config
	restConfigMutex       sync.RWMutex
	restConfigArgsForCall []struct {
	}
	restConfigReturns struct {
		result1 *rest.Config
	}
	restConfigReturnsOnCall map[int]struct {
		result1 *rest.Config
	}
	UpdateGHSourceStub        func(*v1alpha1.GitHubSource) (*v1alpha1.GitHubSource, error)
	updateGHSourceMutex       sync.RWMutex
	updateGHSourceArgsForCall []struct {
		arg1 *v1alpha1.GitHubSource
	}
	updateGHSourceReturns struct {
		result1 *v1alpha1.GitHubSource
		result2 error
	}
	updateGHSourceReturnsOnCall map[int]struct {
		result1 *v1alpha1.GitHubSource
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGHSourceClient) CreateGHSource(arg1 *v1alpha1.GitHubSource) (*v1alpha1.GitHubSource, error) {
	fake.createGHSourceMutex.Lock()
	ret, specificReturn := fake.createGHSourceReturnsOnCall[len(fake.createGHSourceArgsForCall)]
	fake.createGHSourceArgsForCall = append(fake.createGHSourceArgsForCall, struct {
		arg1 *v1alpha1.GitHubSource
	}{arg1})
	fake.recordInvocation("CreateGHSource", []interface{}{arg1})
	fake.createGHSourceMutex.Unlock()
	if fake.CreateGHSourceStub != nil {
		return fake.CreateGHSourceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createGHSourceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGHSourceClient) CreateGHSourceCallCount() int {
	fake.createGHSourceMutex.RLock()
	defer fake.createGHSourceMutex.RUnlock()
	return len(fake.createGHSourceArgsForCall)
}

func (fake *FakeGHSourceClient) CreateGHSourceCalls(stub func(*v1alpha1.GitHubSource) (*v1alpha1.GitHubSource, error)) {
	fake.createGHSourceMutex.Lock()
	defer fake.createGHSourceMutex.Unlock()
	fake.CreateGHSourceStub = stub
}

func (fake *FakeGHSourceClient) CreateGHSourceArgsForCall(i int) *v1alpha1.GitHubSource {
	fake.createGHSourceMutex.RLock()
	defer fake.createGHSourceMutex.RUnlock()
	argsForCall := fake.createGHSourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGHSourceClient) CreateGHSourceReturns(result1 *v1alpha1.GitHubSource, result2 error) {
	fake.createGHSourceMutex.Lock()
	defer fake.createGHSourceMutex.Unlock()
	fake.CreateGHSourceStub = nil
	fake.createGHSourceReturns = struct {
		result1 *v1alpha1.GitHubSource
		result2 error
	}{result1, result2}
}

func (fake *FakeGHSourceClient) CreateGHSourceReturnsOnCall(i int, result1 *v1alpha1.GitHubSource, result2 error) {
	fake.createGHSourceMutex.Lock()
	defer fake.createGHSourceMutex.Unlock()
	fake.CreateGHSourceStub = nil
	if fake.createGHSourceReturnsOnCall == nil {
		fake.createGHSourceReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.GitHubSource
			result2 error
		})
	}
	fake.createGHSourceReturnsOnCall[i] = struct {
		result1 *v1alpha1.GitHubSource
		result2 error
	}{result1, result2}
}

func (fake *FakeGHSourceClient) DeleteGHSource(arg1 string) error {
	fake.deleteGHSourceMutex.Lock()
	ret, specificReturn := fake.deleteGHSourceReturnsOnCall[len(fake.deleteGHSourceArgsForCall)]
	fake.deleteGHSourceArgsForCall = append(fake.deleteGHSourceArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteGHSource", []interface{}{arg1})
	fake.deleteGHSourceMutex.Unlock()
	if fake.DeleteGHSourceStub != nil {
		return fake.DeleteGHSourceStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteGHSourceReturns
	return fakeReturns.result1
}

func (fake *FakeGHSourceClient) DeleteGHSourceCallCount() int {
	fake.deleteGHSourceMutex.RLock()
	defer fake.deleteGHSourceMutex.RUnlock()
	return len(fake.deleteGHSourceArgsForCall)
}

func (fake *FakeGHSourceClient) DeleteGHSourceCalls(stub func(string) error) {
	fake.deleteGHSourceMutex.Lock()
	defer fake.deleteGHSourceMutex.Unlock()
	fake.DeleteGHSourceStub = stub
}

func (fake *FakeGHSourceClient) DeleteGHSourceArgsForCall(i int) string {
	fake.deleteGHSourceMutex.RLock()
	defer fake.deleteGHSourceMutex.RUnlock()
	argsForCall := fake.deleteGHSourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGHSourceClient) DeleteGHSourceReturns(result1 error) {
	fake.deleteGHSourceMutex.Lock()
	defer fake.deleteGHSourceMutex.Unlock()
	fake.DeleteGHSourceStub = nil
	fake.deleteGHSourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGHSourceClient) DeleteGHSourceReturnsOnCall(i int, result1 error) {
	fake.deleteGHSourceMutex.Lock()
	defer fake.deleteGHSourceMutex.Unlock()
	fake.DeleteGHSourceStub = nil
	if fake.deleteGHSourceReturnsOnCall == nil {
		fake.deleteGHSourceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteGHSourceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGHSourceClient) GHSourceParams() *types.GHSourceParams {
	fake.gHSourceParamsMutex.Lock()
	ret, specificReturn := fake.gHSourceParamsReturnsOnCall[len(fake.gHSourceParamsArgsForCall)]
	fake.gHSourceParamsArgsForCall = append(fake.gHSourceParamsArgsForCall, struct {
	}{})
	fake.recordInvocation("GHSourceParams", []interface{}{})
	fake.gHSourceParamsMutex.Unlock()
	if fake.GHSourceParamsStub != nil {
		return fake.GHSourceParamsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.gHSourceParamsReturns
	return fakeReturns.result1
}

func (fake *FakeGHSourceClient) GHSourceParamsCallCount() int {
	fake.gHSourceParamsMutex.RLock()
	defer fake.gHSourceParamsMutex.RUnlock()
	return len(fake.gHSourceParamsArgsForCall)
}

func (fake *FakeGHSourceClient) GHSourceParamsCalls(stub func() *types.GHSourceParams) {
	fake.gHSourceParamsMutex.Lock()
	defer fake.gHSourceParamsMutex.Unlock()
	fake.GHSourceParamsStub = stub
}

func (fake *FakeGHSourceClient) GHSourceParamsReturns(result1 *types.GHSourceParams) {
	fake.gHSourceParamsMutex.Lock()
	defer fake.gHSourceParamsMutex.Unlock()
	fake.GHSourceParamsStub = nil
	fake.gHSourceParamsReturns = struct {
		result1 *types.GHSourceParams
	}{result1}
}

func (fake *FakeGHSourceClient) GHSourceParamsReturnsOnCall(i int, result1 *types.GHSourceParams) {
	fake.gHSourceParamsMutex.Lock()
	defer fake.gHSourceParamsMutex.Unlock()
	fake.GHSourceParamsStub = nil
	if fake.gHSourceParamsReturnsOnCall == nil {
		fake.gHSourceParamsReturnsOnCall = make(map[int]struct {
			result1 *types.GHSourceParams
		})
	}
	fake.gHSourceParamsReturnsOnCall[i] = struct {
		result1 *types.GHSourceParams
	}{result1}
}

func (fake *FakeGHSourceClient) GetGHSource(arg1 string) (*v1alpha1.GitHubSource, error) {
	fake.getGHSourceMutex.Lock()
	ret, specificReturn := fake.getGHSourceReturnsOnCall[len(fake.getGHSourceArgsForCall)]
	fake.getGHSourceArgsForCall = append(fake.getGHSourceArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetGHSource", []interface{}{arg1})
	fake.getGHSourceMutex.Unlock()
	if fake.GetGHSourceStub != nil {
		return fake.GetGHSourceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getGHSourceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGHSourceClient) GetGHSourceCallCount() int {
	fake.getGHSourceMutex.RLock()
	defer fake.getGHSourceMutex.RUnlock()
	return len(fake.getGHSourceArgsForCall)
}

func (fake *FakeGHSourceClient) GetGHSourceCalls(stub func(string) (*v1alpha1.GitHubSource, error)) {
	fake.getGHSourceMutex.Lock()
	defer fake.getGHSourceMutex.Unlock()
	fake.GetGHSourceStub = stub
}

func (fake *FakeGHSourceClient) GetGHSourceArgsForCall(i int) string {
	fake.getGHSourceMutex.RLock()
	defer fake.getGHSourceMutex.RUnlock()
	argsForCall := fake.getGHSourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGHSourceClient) GetGHSourceReturns(result1 *v1alpha1.GitHubSource, result2 error) {
	fake.getGHSourceMutex.Lock()
	defer fake.getGHSourceMutex.Unlock()
	fake.GetGHSourceStub = nil
	fake.getGHSourceReturns = struct {
		result1 *v1alpha1.GitHubSource
		result2 error
	}{result1, result2}
}

func (fake *FakeGHSourceClient) GetGHSourceReturnsOnCall(i int, result1 *v1alpha1.GitHubSource, result2 error) {
	fake.getGHSourceMutex.Lock()
	defer fake.getGHSourceMutex.Unlock()
	fake.GetGHSourceStub = nil
	if fake.getGHSourceReturnsOnCall == nil {
		fake.getGHSourceReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.GitHubSource
			result2 error
		})
	}
	fake.getGHSourceReturnsOnCall[i] = struct {
		result1 *v1alpha1.GitHubSource
		result2 error
	}{result1, result2}
}

func (fake *FakeGHSourceClient) KnSourceParams() *typesa.KnSourceParams {
	fake.knSourceParamsMutex.Lock()
	ret, specificReturn := fake.knSourceParamsReturnsOnCall[len(fake.knSourceParamsArgsForCall)]
	fake.knSourceParamsArgsForCall = append(fake.knSourceParamsArgsForCall, struct {
	}{})
	fake.recordInvocation("KnSourceParams", []interface{}{})
	fake.knSourceParamsMutex.Unlock()
	if fake.KnSourceParamsStub != nil {
		return fake.KnSourceParamsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.knSourceParamsReturns
	return fakeReturns.result1
}

func (fake *FakeGHSourceClient) KnSourceParamsCallCount() int {
	fake.knSourceParamsMutex.RLock()
	defer fake.knSourceParamsMutex.RUnlock()
	return len(fake.knSourceParamsArgsForCall)
}

func (fake *FakeGHSourceClient) KnSourceParamsCalls(stub func() *typesa.KnSourceParams) {
	fake.knSourceParamsMutex.Lock()
	defer fake.knSourceParamsMutex.Unlock()
	fake.KnSourceParamsStub = stub
}

func (fake *FakeGHSourceClient) KnSourceParamsReturns(result1 *typesa.KnSourceParams) {
	fake.knSourceParamsMutex.Lock()
	defer fake.knSourceParamsMutex.Unlock()
	fake.KnSourceParamsStub = nil
	fake.knSourceParamsReturns = struct {
		result1 *typesa.KnSourceParams
	}{result1}
}

func (fake *FakeGHSourceClient) KnSourceParamsReturnsOnCall(i int, result1 *typesa.KnSourceParams) {
	fake.knSourceParamsMutex.Lock()
	defer fake.knSourceParamsMutex.Unlock()
	fake.KnSourceParamsStub = nil
	if fake.knSourceParamsReturnsOnCall == nil {
		fake.knSourceParamsReturnsOnCall = make(map[int]struct {
			result1 *typesa.KnSourceParams
		})
	}
	fake.knSourceParamsReturnsOnCall[i] = struct {
		result1 *typesa.KnSourceParams
	}{result1}
}

func (fake *FakeGHSourceClient) Namespace() string {
	fake.namespaceMutex.Lock()
	ret, specificReturn := fake.namespaceReturnsOnCall[len(fake.namespaceArgsForCall)]
	fake.namespaceArgsForCall = append(fake.namespaceArgsForCall, struct {
	}{})
	fake.recordInvocation("Namespace", []interface{}{})
	fake.namespaceMutex.Unlock()
	if fake.NamespaceStub != nil {
		return fake.NamespaceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.namespaceReturns
	return fakeReturns.result1
}

func (fake *FakeGHSourceClient) NamespaceCallCount() int {
	fake.namespaceMutex.RLock()
	defer fake.namespaceMutex.RUnlock()
	return len(fake.namespaceArgsForCall)
}

func (fake *FakeGHSourceClient) NamespaceCalls(stub func() string) {
	fake.namespaceMutex.Lock()
	defer fake.namespaceMutex.Unlock()
	fake.NamespaceStub = stub
}

func (fake *FakeGHSourceClient) NamespaceReturns(result1 string) {
	fake.namespaceMutex.Lock()
	defer fake.namespaceMutex.Unlock()
	fake.NamespaceStub = nil
	fake.namespaceReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeGHSourceClient) NamespaceReturnsOnCall(i int, result1 string) {
	fake.namespaceMutex.Lock()
	defer fake.namespaceMutex.Unlock()
	fake.NamespaceStub = nil
	if fake.namespaceReturnsOnCall == nil {
		fake.namespaceReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.namespaceReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeGHSourceClient) RestConfig() *rest.Config {
	fake.restConfigMutex.Lock()
	ret, specificReturn := fake.restConfigReturnsOnCall[len(fake.restConfigArgsForCall)]
	fake.restConfigArgsForCall = append(fake.restConfigArgsForCall, struct {
	}{})
	fake.recordInvocation("RestConfig", []interface{}{})
	fake.restConfigMutex.Unlock()
	if fake.RestConfigStub != nil {
		return fake.RestConfigStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.restConfigReturns
	return fakeReturns.result1
}

func (fake *FakeGHSourceClient) RestConfigCallCount() int {
	fake.restConfigMutex.RLock()
	defer fake.restConfigMutex.RUnlock()
	return len(fake.restConfigArgsForCall)
}

func (fake *FakeGHSourceClient) RestConfigCalls(stub func() *rest.Config) {
	fake.restConfigMutex.Lock()
	defer fake.restConfigMutex.Unlock()
	fake.RestConfigStub = stub
}

func (fake *FakeGHSourceClient) RestConfigReturns(result1 *rest.Config) {
	fake.restConfigMutex.Lock()
	defer fake.restConfigMutex.Unlock()
	fake.RestConfigStub = nil
	fake.restConfigReturns = struct {
		result1 *rest.Config
	}{result1}
}

func (fake *FakeGHSourceClient) RestConfigReturnsOnCall(i int, result1 *rest.Config) {
	fake.restConfigMutex.Lock()
	defer fake.restConfigMutex.Unlock()
	fake.RestConfigStub = nil
	if fake.restConfigReturnsOnCall == nil {
		fake.restConfigReturnsOnCall = make(map[int]struct {
			result1 *rest.Config
		})
	}
	fake.restConfigReturnsOnCall[i] = struct {
		result1 *rest.Config
	}{result1}
}

func (fake *FakeGHSourceClient) UpdateGHSource(arg1 *v1alpha1.GitHubSource) (*v1alpha1.GitHubSource, error) {
	fake.updateGHSourceMutex.Lock()
	ret, specificReturn := fake.updateGHSourceReturnsOnCall[len(fake.updateGHSourceArgsForCall)]
	fake.updateGHSourceArgsForCall = append(fake.updateGHSourceArgsForCall, struct {
		arg1 *v1alpha1.GitHubSource
	}{arg1})
	fake.recordInvocation("UpdateGHSource", []interface{}{arg1})
	fake.updateGHSourceMutex.Unlock()
	if fake.UpdateGHSourceStub != nil {
		return fake.UpdateGHSourceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateGHSourceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGHSourceClient) UpdateGHSourceCallCount() int {
	fake.updateGHSourceMutex.RLock()
	defer fake.updateGHSourceMutex.RUnlock()
	return len(fake.updateGHSourceArgsForCall)
}

func (fake *FakeGHSourceClient) UpdateGHSourceCalls(stub func(*v1alpha1.GitHubSource) (*v1alpha1.GitHubSource, error)) {
	fake.updateGHSourceMutex.Lock()
	defer fake.updateGHSourceMutex.Unlock()
	fake.UpdateGHSourceStub = stub
}

func (fake *FakeGHSourceClient) UpdateGHSourceArgsForCall(i int) *v1alpha1.GitHubSource {
	fake.updateGHSourceMutex.RLock()
	defer fake.updateGHSourceMutex.RUnlock()
	argsForCall := fake.updateGHSourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGHSourceClient) UpdateGHSourceReturns(result1 *v1alpha1.GitHubSource, result2 error) {
	fake.updateGHSourceMutex.Lock()
	defer fake.updateGHSourceMutex.Unlock()
	fake.UpdateGHSourceStub = nil
	fake.updateGHSourceReturns = struct {
		result1 *v1alpha1.GitHubSource
		result2 error
	}{result1, result2}
}

func (fake *FakeGHSourceClient) UpdateGHSourceReturnsOnCall(i int, result1 *v1alpha1.GitHubSource, result2 error) {
	fake.updateGHSourceMutex.Lock()
	defer fake.updateGHSourceMutex.Unlock()
	fake.UpdateGHSourceStub = nil
	if fake.updateGHSourceReturnsOnCall == nil {
		fake.updateGHSourceReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.GitHubSource
			result2 error
		})
	}
	fake.updateGHSourceReturnsOnCall[i] = struct {
		result1 *v1alpha1.GitHubSource
		result2 error
	}{result1, result2}
}

func (fake *FakeGHSourceClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createGHSourceMutex.RLock()
	defer fake.createGHSourceMutex.RUnlock()
	fake.deleteGHSourceMutex.RLock()
	defer fake.deleteGHSourceMutex.RUnlock()
	fake.gHSourceParamsMutex.RLock()
	defer fake.gHSourceParamsMutex.RUnlock()
	fake.getGHSourceMutex.RLock()
	defer fake.getGHSourceMutex.RUnlock()
	fake.knSourceParamsMutex.RLock()
	defer fake.knSourceParamsMutex.RUnlock()
	fake.namespaceMutex.RLock()
	defer fake.namespaceMutex.RUnlock()
	fake.restConfigMutex.RLock()
	defer fake.restConfigMutex.RUnlock()
	fake.updateGHSourceMutex.RLock()
	defer fake.updateGHSourceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGHSourceClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ types.GHSourceClient = new(FakeGHSourceClient)
