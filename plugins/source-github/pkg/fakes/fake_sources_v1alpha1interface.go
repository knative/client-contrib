// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"k8s.io/client-go/rest"
	"knative.dev/eventing-contrib/github/pkg/client/clientset/versioned/typed/sources/v1alpha1"
)

type FakeSourcesV1alpha1Interface struct {
	GitHubSourcesStub        func(string) v1alpha1.GitHubSourceInterface
	gitHubSourcesMutex       sync.RWMutex
	gitHubSourcesArgsForCall []struct {
		arg1 string
	}
	gitHubSourcesReturns struct {
		result1 v1alpha1.GitHubSourceInterface
	}
	gitHubSourcesReturnsOnCall map[int]struct {
		result1 v1alpha1.GitHubSourceInterface
	}
	RESTClientStub        func() rest.Interface
	rESTClientMutex       sync.RWMutex
	rESTClientArgsForCall []struct {
	}
	rESTClientReturns struct {
		result1 rest.Interface
	}
	rESTClientReturnsOnCall map[int]struct {
		result1 rest.Interface
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSourcesV1alpha1Interface) GitHubSources(arg1 string) v1alpha1.GitHubSourceInterface {
	fake.gitHubSourcesMutex.Lock()
	ret, specificReturn := fake.gitHubSourcesReturnsOnCall[len(fake.gitHubSourcesArgsForCall)]
	fake.gitHubSourcesArgsForCall = append(fake.gitHubSourcesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GitHubSources", []interface{}{arg1})
	fake.gitHubSourcesMutex.Unlock()
	if fake.GitHubSourcesStub != nil {
		return fake.GitHubSourcesStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.gitHubSourcesReturns
	return fakeReturns.result1
}

func (fake *FakeSourcesV1alpha1Interface) GitHubSourcesCallCount() int {
	fake.gitHubSourcesMutex.RLock()
	defer fake.gitHubSourcesMutex.RUnlock()
	return len(fake.gitHubSourcesArgsForCall)
}

func (fake *FakeSourcesV1alpha1Interface) GitHubSourcesCalls(stub func(string) v1alpha1.GitHubSourceInterface) {
	fake.gitHubSourcesMutex.Lock()
	defer fake.gitHubSourcesMutex.Unlock()
	fake.GitHubSourcesStub = stub
}

func (fake *FakeSourcesV1alpha1Interface) GitHubSourcesArgsForCall(i int) string {
	fake.gitHubSourcesMutex.RLock()
	defer fake.gitHubSourcesMutex.RUnlock()
	argsForCall := fake.gitHubSourcesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSourcesV1alpha1Interface) GitHubSourcesReturns(result1 v1alpha1.GitHubSourceInterface) {
	fake.gitHubSourcesMutex.Lock()
	defer fake.gitHubSourcesMutex.Unlock()
	fake.GitHubSourcesStub = nil
	fake.gitHubSourcesReturns = struct {
		result1 v1alpha1.GitHubSourceInterface
	}{result1}
}

func (fake *FakeSourcesV1alpha1Interface) GitHubSourcesReturnsOnCall(i int, result1 v1alpha1.GitHubSourceInterface) {
	fake.gitHubSourcesMutex.Lock()
	defer fake.gitHubSourcesMutex.Unlock()
	fake.GitHubSourcesStub = nil
	if fake.gitHubSourcesReturnsOnCall == nil {
		fake.gitHubSourcesReturnsOnCall = make(map[int]struct {
			result1 v1alpha1.GitHubSourceInterface
		})
	}
	fake.gitHubSourcesReturnsOnCall[i] = struct {
		result1 v1alpha1.GitHubSourceInterface
	}{result1}
}

func (fake *FakeSourcesV1alpha1Interface) RESTClient() rest.Interface {
	fake.rESTClientMutex.Lock()
	ret, specificReturn := fake.rESTClientReturnsOnCall[len(fake.rESTClientArgsForCall)]
	fake.rESTClientArgsForCall = append(fake.rESTClientArgsForCall, struct {
	}{})
	fake.recordInvocation("RESTClient", []interface{}{})
	fake.rESTClientMutex.Unlock()
	if fake.RESTClientStub != nil {
		return fake.RESTClientStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.rESTClientReturns
	return fakeReturns.result1
}

func (fake *FakeSourcesV1alpha1Interface) RESTClientCallCount() int {
	fake.rESTClientMutex.RLock()
	defer fake.rESTClientMutex.RUnlock()
	return len(fake.rESTClientArgsForCall)
}

func (fake *FakeSourcesV1alpha1Interface) RESTClientCalls(stub func() rest.Interface) {
	fake.rESTClientMutex.Lock()
	defer fake.rESTClientMutex.Unlock()
	fake.RESTClientStub = stub
}

func (fake *FakeSourcesV1alpha1Interface) RESTClientReturns(result1 rest.Interface) {
	fake.rESTClientMutex.Lock()
	defer fake.rESTClientMutex.Unlock()
	fake.RESTClientStub = nil
	fake.rESTClientReturns = struct {
		result1 rest.Interface
	}{result1}
}

func (fake *FakeSourcesV1alpha1Interface) RESTClientReturnsOnCall(i int, result1 rest.Interface) {
	fake.rESTClientMutex.Lock()
	defer fake.rESTClientMutex.Unlock()
	fake.RESTClientStub = nil
	if fake.rESTClientReturnsOnCall == nil {
		fake.rESTClientReturnsOnCall = make(map[int]struct {
			result1 rest.Interface
		})
	}
	fake.rESTClientReturnsOnCall[i] = struct {
		result1 rest.Interface
	}{result1}
}

func (fake *FakeSourcesV1alpha1Interface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.gitHubSourcesMutex.RLock()
	defer fake.gitHubSourcesMutex.RUnlock()
	fake.rESTClientMutex.RLock()
	defer fake.rESTClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSourcesV1alpha1Interface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v1alpha1.SourcesV1alpha1Interface = new(FakeSourcesV1alpha1Interface)
